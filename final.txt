1.1
CREATE DATABASE IF NOT EXISTS pandemic;

1.2.
USE pandemic;

--------------

Створюємо 2 нові таблиці

2.1
CREATE TABLE countries (
    country_id INT AUTO_INCREMENT PRIMARY KEY,
    country_name VARCHAR(255),
    country_code VARCHAR(55)
);


2.2

CREATE TABLE IF NOT EXISTS infectious_cases_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    country_id INT,
    year INT,
    number_yaws INT,
    polio_cases INT,
    cases_guinea_worm INT,
    number_rabies FLOAT,
    number_malaria FLOAT,
    number_hiv FLOAT,
    number_tuberculosis FLOAT,
    number_smallpox INT,
    number_cholera_cases INT,
    FOREIGN KEY (country_id) REFERENCES countries(country_id)
);


Заповнюємо нові таблиці даними зі старої

2.3
INSERT INTO countries (country_name, country_code)
SELECT DISTINCT Entity, Code FROM pandemic.infectious_cases;


2.4
NULLIF використано для тих випадків де був наявний пустий стрінг.
Оскільки у старій таблиці значення були типу TEXT, а не INT чи FLOAT

INSERT INTO pandemic.infectious_cases_table (
    country_id,
    year,
    number_yaws,
    polio_cases,
    cases_guinea_worm,
    number_rabies,
    number_malaria,
    number_hiv,
    number_tuberculosis,
    number_smallpox,
    number_cholera_cases
)
SELECT
    country_id,
    Year,
    NULLIF(Number_yaws, ''),
    polio_cases,
    cases_guinea_worm,
    NULLIF(Number_rabies, ''),
    NULLIF(Number_malaria, ''),
    NULLIF(Number_hiv, ''),
    NULLIF(Number_tuberculosis, ''),
    NULLIF(Number_smallpox, ''),
    NULLIF(Number_cholera_cases, '')
FROM pandemic.infectious_cases
JOIN pandemic.countries ON Entity = country_name;

--------------

3.
так як я при заповненні таблиці пусті стрінги замінила на NULL,
то тут я фільтрую ті значення, що не NULL

SELECT 
	country_id,
    AVG(number_rabies) AS avg_rabies,
    MIN(number_rabies) AS min_rabies,
    MAX(number_rabies) AS max_rabies,
    SUM(number_rabies) AS sum_rabies
FROM pandemic.infectious_cases_table
WHERE number_rabies IS NOT NULL
GROUP BY country_id
ORDER BY avg_rabies DESC
LIMIT 10;

4.
4.1
SELECT year, MAKEDATE(year,1) as new_year
FROM pandemic.infectious_cases_table;

4.2
SELECT year, MAKEDATE(year,1) AS new_year, CURDATE() AS curr_date
FROM pandemic.infectious_cases_table;

4.3
SELECT year, 
	MAKEDATE(year,1) AS new_year, 
	CURDATE() AS curr_date, 
	TIMESTAMPDIFF(YEAR,MAKEDATE(year,1), CURDATE()) AS timestamp_diff
FROM pandemic.infectious_cases_table;

5.
DROP FUNCTION IF EXISTS Finalfunction;

DELIMITER //

CREATE FUNCTION Finalfunction(input_year YEAR)
RETURNS INT
DETERMINISTIC 
BEGIN
    DECLARE result INT;
    SET result = TIMESTAMPDIFF(YEAR, MAKEDATE(input_year,1), CURDATE());
    RETURN result;
END //

DELIMITER ;

SELECT year,
	MAKEDATE(year,1) AS new_year,
	CURDATE() AS curr_date,
    Finalfunction(year) AS timestamp_diff_function
FROM pandemic.infectious_cases_table;



